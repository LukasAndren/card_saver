package com.card_saver.repository;

import com.card_saver.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.transaction.annotation.Transactional;

import java.sql.*;

/**
 * Handles database services that results in/requires Users.
 */
@Repository
public class UserRepository {

    @Autowired
    JdbcTemplate jdbcTemplate;

    /**
     * Saves the User to the database and sets the parameter User's id
     * to the one generated by the database.
     *
     * @param user - The User to be saved.
     */
    @Transactional
    public void createUser(User user){
        String sql = "INSERT INTO USERS (USERNAME, PASSWORD) VALUES ('" + user.getUsername() + "', '" + user.getPassword() + "')";

        KeyHolder holder = new GeneratedKeyHolder();
        jdbcTemplate.update(new PreparedStatementCreator() {
            @Override
            public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
                PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

                return ps;
            }
        }, holder);

        user.setId(holder.getKey().intValue());
    }

    /**
     * Checks whether the parameter User exists by counting the amount of rows
     * that match the parameter User's id in the database.
     *
     * @param user - The User to be validated.
     * @return True if the User exists in the database, or false if not.
     */
    @Transactional
    public Boolean userExists(User user){
        String sql = "SELECT COUNT(*) FROM USERS WHERE USERNAME = '" + user.getUsername() + "' AND PASSWORD = '" + user.getPassword() + "'";

        int count = jdbcTemplate.queryForObject(sql, int.class);

        if(count > 0){
           return true;
        } else {
            return false;
        }
    }

    /**
     * Fetches the parameter User's id from the database using the User's
     * username and password (username is unique).
     *
     * @param user - The User whose id is to be fetched.
     * @return The value of the id.
     */
    @Transactional
    public int getUserId(User user){
        String userIdSql = "SELECT USERID FROM USERS WHERE USERNAME = '" + user.getUsername() + "' AND PASSWORD = '" + user.getPassword() + "'";
        return jdbcTemplate.queryForObject(userIdSql, int.class);

    }

    /**
     * Checks whether the parameter User's username is already in use by counting
     * the amount of rows that match the parameter User's username in the database.
     *
     * @param user - The User whose username is to be validated.
     * @return True if the username already exists in the database, or false if not.
     */
    @Transactional
    public Boolean usernameIsUnique(User user){
        String sql = "SELECT COUNT(*) FROM USERS WHERE USERNAME = '" + user.getUsername() + "'";

        int count = jdbcTemplate.queryForObject(sql, int.class);

        if(count > 0){
            return false;
        } else {
            return true;
        }

    }
}
